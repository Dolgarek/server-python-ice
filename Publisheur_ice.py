# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `Publisheur.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Notifier
_M_Notifier = Ice.openModule('Notifier')
__name__ = 'Notifier'

_M_Notifier._t_Request = IcePy.defineValue('::Notifier::Request', Ice.Value, -1, (), False, True, None, ())

if 'RequestPrx' not in _M_Notifier.__dict__:
    _M_Notifier.RequestPrx = Ice.createTempClass()
    class RequestPrx(Ice.ObjectPrx):

        def newFile(self, time, context=None):
            return _M_Notifier.Request._op_newFile.invoke(self, ((time, ), context))

        def newFileAsync(self, time, context=None):
            return _M_Notifier.Request._op_newFile.invokeAsync(self, ((time, ), context))

        def begin_newFile(self, time, _response=None, _ex=None, _sent=None, context=None):
            return _M_Notifier.Request._op_newFile.begin(self, ((time, ), _response, _ex, _sent, context))

        def end_newFile(self, _r):
            return _M_Notifier.Request._op_newFile.end(self, _r)

        def renameFile(self, id, oldName, fileName, context=None):
            return _M_Notifier.Request._op_renameFile.invoke(self, ((id, oldName, fileName), context))

        def renameFileAsync(self, id, oldName, fileName, context=None):
            return _M_Notifier.Request._op_renameFile.invokeAsync(self, ((id, oldName, fileName), context))

        def begin_renameFile(self, id, oldName, fileName, _response=None, _ex=None, _sent=None, context=None):
            return _M_Notifier.Request._op_renameFile.begin(self, ((id, oldName, fileName), _response, _ex, _sent, context))

        def end_renameFile(self, _r):
            return _M_Notifier.Request._op_renameFile.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Notifier.RequestPrx.ice_checkedCast(proxy, '::Notifier::Request', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Notifier.RequestPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Notifier::Request'
    _M_Notifier._t_RequestPrx = IcePy.defineProxy('::Notifier::Request', RequestPrx)

    _M_Notifier.RequestPrx = RequestPrx
    del RequestPrx

    _M_Notifier.Request = Ice.createTempClass()
    class Request(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Notifier::Request')

        def ice_id(self, current=None):
            return '::Notifier::Request'

        @staticmethod
        def ice_staticId():
            return '::Notifier::Request'

        def newFile(self, time, current=None):
            raise NotImplementedError("servant method 'newFile' not implemented")

        def renameFile(self, id, oldName, fileName, current=None):
            raise NotImplementedError("servant method 'renameFile' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Notifier._t_RequestDisp)

        __repr__ = __str__

    _M_Notifier._t_RequestDisp = IcePy.defineClass('::Notifier::Request', Request, (), None, ())
    Request._ice_type = _M_Notifier._t_RequestDisp

    Request._op_newFile = IcePy.Operation('newFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Request._op_renameFile = IcePy.Operation('renameFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())

    _M_Notifier.Request = Request
    del Request

# End of module Notifier
